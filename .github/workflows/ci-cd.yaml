name: test

on:
  push:
    branches: [ add-cicd ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: m5c3k8g7/ecr-vb/weather-app
  IMAGE_TAG: "test"

jobs:
  test-job:
    name: Test Job
    runs-on: self-hosted
    steps:
      - name: Test steps
        run: |
          echo "Running test steps..."
          # Add your test commands here
          echo "Test completed successfully!"
  
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        # uses: aws-actions/amazon-ecr-login@v2
        run: |
          echo "Logging in to Amazon ECR..."
          aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: public.ecr.aws
        run: |
          cd app
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  terraform:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -out=tfplan > plan.txt
          # Save exit code for later use
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      # - name: Check for changes
      #   id: check_changes
      #   run: |
      #     if grep -q "No changes. Infrastructure is up-to-date." plan.txt; then
      #       echo "no_changes=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "no_changes=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Terraform Apply
      #   if: steps.check_changes.outputs.no_changes == 'false'
      #   run: terraform apply -auto-approve tfplan