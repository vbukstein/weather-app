name: CI/CD for main branch
# This workflow is triggered on pushes to the main branch and handles version bumping, Docker image building, ECR pushing, Terraform deployment, and Helm deployment.

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: m5c3k8g7/ecr-vb/weather-app
  HELM_RELEASE_NAME: "openweather"

jobs:

  bump-version:
    name: Bump Version
    runs-on: self-hosted
    outputs:
      NEW_VERSION: ${{ steps.bump_version.outputs.NEW_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN_TUTORIAL_TEMP }} 
          fetch-depth: 0 

      - name: Bump version
        id: bump_version
        run: |
          cd app
          echo "Bumping version..."
          echo "NEW_VERSION=$(export LC_ALL=C.UTF-8 && export LANG=C.UTF-8 && bump -p)" >> $GITHUB_OUTPUT

      - name: Print new version
        run: echo "New version is ${{ steps.bump_version.outputs.NEW_VERSION }}"

      - name: Update Chart.yaml
        run: |
          cd chart
          echo "Updating Chart.yaml with new version..."
          sed -i "s/^version: .*/version: ${{ steps.bump_version.outputs.NEW_VERSION }}/" Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: ${{ steps.bump_version.outputs.NEW_VERSION }}/" Chart.yaml

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -am "Release: bump version to ${{ steps.bump_version.outputs.NEW_VERSION }} [skip ci]"
          git push origin HEAD:main


      # - name: Set output for version
      #   run: echo "version=${{ steps.bump_version.outputs.version }}" >> $GITHUB_OUTPUT
  
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: self-hosted
    needs: bump-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        # uses: aws-actions/amazon-ecr-login@v2
        run: |
          echo "Logging in to Amazon ECR..."
          aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: public.ecr.aws
        run: |
          cd app
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ needs.bump-version.outputs.NEW_VERSION }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ needs.bump-version.outputs.NEW_VERSION }}

  terraform:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -out=tfplan > plan.txt
          # Save exit code for later use
          echo "exitcode=$?" >> $GITHUB_OUTPUT
          cat plan.txt

      - name: Check for changes
        id: check_changes
        run: |
          cd terraform
          if grep -aFq "No changes." plan.txt; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: steps.check_changes.outputs.no_changes == 'false'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  helm_deploy:
    runs-on: self-hosted
    needs: terraform   # This ensures helm_deploy waits for terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      # - name: Set up Helm
      #   uses: azure/setup-helm@v4

      - name: Deploy with Helm
        run: |
          cd chart
          echo "Deploying with Helm..."
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} . -f values.yaml --namespace default